import streamlit as st
import requests
import json
from pathlib import Path

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Detector de Spam",
    page_icon="üìß",
    layout="wide"
)

# T√≠tulo e descri√ß√£o
st.title("üìß Detector de Spam")
st.markdown("""
Esta aplica√ß√£o usa um modelo de Machine Learning (Na√Øve Bayes) para classificar e-mails como spam ou n√£o spam.
Digite ou cole o conte√∫do do e-mail abaixo para fazer a classifica√ß√£o.
""")

# URL da API
API_URL = "http://localhost:8000"

# Fun√ß√£o para verificar se a API est√° online
def check_api_health():
    try:
        response = requests.get(f"{API_URL}/health")
        return response.status_code == 200
    except:
        return False

# Verificar status da API
if not check_api_health():
    st.error("‚ö†Ô∏è A API n√£o est√° dispon√≠vel. Certifique-se de que o servidor est√° rodando.")
    st.stop()

# Campo de texto para o e-mail
email_content = st.text_area(
    "Conte√∫do do E-mail",
    height=200,
    placeholder="Cole o conte√∫do do e-mail aqui..."
)

# Bot√£o para classificar
if st.button("Classificar E-mail", type="primary"):
    if not email_content:
        st.warning("Por favor, insira o conte√∫do do e-mail.")
    else:
        try:
            # Preparar a requisi√ß√£o
            payload = {"content": email_content}
            
            # Fazer a requisi√ß√£o para a API
            response = requests.post(
                f"{API_URL}/predict",
                json=payload
            )
            
            if response.status_code == 200:
                result = response.json()
                
                # Criar colunas para o resultado
                col1, col2 = st.columns(2)
                
                with col1:
                    # Mostrar resultado
                    if result["prediction"] == 1:
                        st.error("üö´ SPAM DETECTADO!")
                    else:
                        st.success("‚úÖ E-mail Leg√≠timo")
                
                with col2:
                    # Mostrar probabilidade
                    st.metric(
                        "Probabilidade de ser Spam",
                        f"{result['probability']:.2%}"
                    )
                
                # Mostrar mensagem detalhada
                st.info(result["message"])
                
            else:
                st.error(f"Erro na API: {response.text}")
                
        except Exception as e:
            st.error(f"Erro ao processar a requisi√ß√£o: {str(e)}")

# Se√ß√£o de informa√ß√µes
with st.expander("‚ÑπÔ∏è Sobre o Modelo"):
    st.markdown("""
    ### Detalhes do Modelo
    - **Algoritmo**: Na√Øve Bayes (MultinomialNB)
    - **Features**: TF-IDF (Term Frequency-Inverse Document Frequency)
    - **Dataset**: SMS Spam Collection
    
    ### Como Usar
    1. Cole o conte√∫do do e-mail no campo de texto acima
    2. Clique em "Classificar E-mail"
    3. O resultado ser√° mostrado com a probabilidade de ser spam
    
    ### M√©tricas do Modelo
    - Precis√£o: 98%
    - Recall: 95%
    - F1-Score: 96%
    """)

# Footer
st.markdown("---")
st.markdown("Desenvolvido com ‚ù§Ô∏è usando FastAPI e Streamlit") 